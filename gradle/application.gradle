/*
 * Check usage information at: http://hexagonkt.com/gradle/#application
 */

apply(plugin: "application")

defaultTasks("installDist")

classes.dependsOn("buildInfo")

task("buildInfo").doLast {
    file("$buildDir/resources/main").mkdirs()
    file("$buildDir/resources/main/application.properties").write("""
        project=$rootProject.name
        module=$project.name
        version=${project.version.toString()}
        group=$project.group
        description=$project.description
    """.stripIndent ())
}

task("jarAll", type: Jar, dependsOn: "jar") {
    archiveBaseName.set("${archiveBaseName.orNull}-all")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude("META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA")
    }
    with(jar)

    doFirst {
        manifest {
            attributes("Main-Class": application.mainClassName)
        }
    }
}

task("watch", dependsOn: "classes").doLast {
    final JavaExec runTask = run

    // NOTE: these two statements are *REQUIRED* to load classpath and main class
    runTask.classpath.each { it.toString() }
    runTask.main.toString()

    ByteArrayOutputStream out = new ByteArrayOutputStream()
    exec {
        commandLine("jps", "-l")
        standardOutput = out
    }
    out.toString().readLines()
        .findAll { it.endsWith((String)runTask.main) }
        .collect { it.split(" ")[0] }
        .each { pid -> exec { commandLine("kill", pid) } }

    Thread.startDaemon {
        runTask.setIgnoreExitValue(true)
        runTask.actions.each { action -> action.execute(runTask) }
    }
}
