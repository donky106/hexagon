/*
 * Check usage information at: http://hexagonkt.com/gradle/#jmh
 */

apply(plugin: "me.champeau.gradle.jmh")

project.ext.jmhBenchmarkVersion = findProperty("jmhBenchmarkVersion") ?: "1.21"

dependencies {
    final String jmhBenchmarkVersion = project.ext.jmhBenchmarkVersion // To avoid undefined warning

    // Added for IntelliJ IDEA to compile JMH tests inside the IDE
    compileOnly("org.openjdk.jmh:jmh-core:$jmhBenchmarkVersion")
    compileOnly("org.openjdk.jmh:jmh-generator-annprocess:$jmhBenchmarkVersion")

    jmh("org.openjdk.jmh:jmh-core:$jmhBenchmarkVersion")
    annotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:$jmhBenchmarkVersion")
}

jmh {
    final String projectIterations = findProperty("iterations")
    final String projectBenchmarkModes = findProperty("benchmarkModes")
    final String projectBatchSize = findProperty("batchSize")
    final String projectFork = findProperty("fork")
    final String projectOperationsPerInvocation = findProperty("operationsPerInvocation")
    final String projectTimeOnIteration = findProperty("timeOnIteration")
    final String projectWarmup = findProperty("warmup")
    final String projectWarmupBatchSize = findProperty("warmupBatchSize")
    final String projectWarmupIterations = findProperty("warmupIterations")

    iterations = projectIterations.toInteger() ?: 5
    benchmarkMode = projectBenchmarkModes.split (",").collect { it.trim() } ?: [ "all" ]
    batchSize = projectBatchSize.toInteger() ?: 1
    fork = projectFork.toInteger() ?: 1
    operationsPerInvocation = projectOperationsPerInvocation.toInteger() ?: 5
    timeOnIteration = projectTimeOnIteration ?: "1s"
    warmup = projectWarmup ?: "1s"
    warmupBatchSize = projectWarmupBatchSize.toInteger() ?: 5
    warmupIterations = projectWarmupIterations.toInteger() ?: 1

    jmhVersion = rootProject.ext.jmhBenchmarkVersion
}
