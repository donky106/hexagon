/*
 * Check usage information at: http://hexagonkt.com/gradle/#kotlin
 */

apply(plugin: "idea")
apply(plugin: "eclipse")
apply(plugin: "kotlin")
apply(plugin: "jacoco")
apply(plugin: "maven-publish")

defaultTasks("build")

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = sourceCompatibility
}

idea {
    module {
        setDownloadSources(true)
        setDownloadJavadoc(true)
    }
}

eclipse {
    classpath {
        setDownloadSources(true)
        setDownloadJavadoc(true)
    }
}

repositories {
    mavenLocal()
    // TODO Remove when published to Maven Central
    maven { url  "https://dl.bintray.com/hexagonkt/hexagon" }
    mavenCentral()
    jcenter()
}

dependencies {
    final String scriptKotlinVersion = findProperty("kotlinVersion") ?: "1.3.72"
    final String scriptMockkVersion = findProperty("mockkVersion") ?: "1.10.0"
    final String scriptKotestVersion = findProperty("kotestVersion") ?: "4.0.5"

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$scriptKotlinVersion")

    testImplementation("org.jetbrains.kotlin:kotlin-test:$scriptKotlinVersion")
    testImplementation("io.kotest:kotest-runner-junit5-jvm:$scriptKotestVersion")
    testImplementation("io.kotest:kotest-assertions-core-jvm:$scriptKotestVersion")
    testImplementation("io.kotest:kotest-property-jvm:$scriptKotestVersion")
    testImplementation("io.mockk:mockk:$scriptMockkVersion")

    // NOTE This dependency is *REQUIRED* to run the tests (otherwise, they are ignored silently)
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

// Replace build variables in resource files
processResources {
    [ "properties", "ini", "cfg", "txt", "html", "xml", "json", "yaml" ].each { String ext ->
        final Map<String, ?> stringProperties = project.getProperties()
            .findAll { it.value instanceof String }

        filesMatching("**/*.$ext") {
            filter {
                String content = it

                stringProperties.entrySet().forEach { entry ->
                    content = content.replace("\${project.${entry.key}}", entry.value.toString())
                }

                content
            }
        }
    }
}

tasks.compileKotlin.kotlinOptions.jvmTarget = targetCompatibility
tasks.compileKotlin.kotlinOptions.apiVersion = "1.3"

tasks.compileTestKotlin.kotlinOptions.jvmTarget = tasks.compileKotlin.kotlinOptions.jvmTarget
tasks.compileTestKotlin.kotlinOptions.apiVersion = tasks.compileKotlin.kotlinOptions.apiVersion

clean {
    delete("build", "log", "out", ".vertx", "file-uploads")

    delete(
        fileTree(rootDir) { include "**/*.log" },
        fileTree(rootDir) { include "**/*.hprof" },
        fileTree(rootDir) { include "**/.attach_pid*" },
        fileTree(rootDir) { include "**/hs_err_pid*" }
    )
}

test {
    exclude("**/*IT.*")
}

task("verify", type: Test) {
    group = "verification"
    description = "Runs integration tests."

    shouldRunAfter(test)
    include("**/*IT.*")
}

tasks.withType(Test).each { testTask ->
    testTask.useJUnitPlatform()
}

check.dependsOn("test", "verify")

// Show useful testing information while running tests
tasks.withType(Test).each { testTask ->
    testTask.systemProperties(project.getProperties().findAll { it.value instanceof String })

    testTask.testLogging {
        if (logger.isInfoEnabled())
            events("skipped", "failed", "standardOut", "standardError")
        else
            events("skipped", "failed")
    }
}

jacocoTestReport {
    dependsOn("check")
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task("sourceJar", type: Jar) {
    archiveClassifier.set("sources")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.allSource)
}

task("testJar", type: Jar, dependsOn: testClasses) {
    archiveClassifier.set("test")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.test.output.classesDirs)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            artifact(sourceJar) // To be accepted in JCenter, the package need to include sources
            artifact(testJar)
        }
    }
}
